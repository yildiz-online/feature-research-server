/*
 * This file is generated by jOOQ.
*/
package be.yildizgames.engine.feature.research.generated.database.tables;


import be.yildizgames.engine.feature.research.generated.database.Indexes;
import be.yildizgames.engine.feature.research.generated.database.Keys;
import be.yildizgames.engine.feature.research.generated.database.Public;
import be.yildizgames.engine.feature.research.generated.database.tables.records.PlayersRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Players extends TableImpl<PlayersRecord> {

    private static final long serialVersionUID = -401009771;

    /**
     * The reference instance of <code>PUBLIC.PLAYERS</code>
     */
    public static final Players PLAYERS = new Players();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayersRecord> getRecordType() {
        return PlayersRecord.class;
    }

    /**
     * The column <code>PUBLIC.PLAYERS.PLY_ID</code>.
     */
    public final TableField<PlayersRecord, Short> PLY_ID = createField("PLY_ID", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).identity(true), this, "");

    /**
     * Create a <code>PUBLIC.PLAYERS</code> table reference
     */
    public Players() {
        this(DSL.name("PLAYERS"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.PLAYERS</code> table reference
     */
    public Players(String alias) {
        this(DSL.name(alias), PLAYERS);
    }

    /**
     * Create an aliased <code>PUBLIC.PLAYERS</code> table reference
     */
    public Players(Name alias) {
        this(alias, PLAYERS);
    }

    private Players(Name alias, Table<PlayersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Players(Name alias, Table<PlayersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_D6);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PlayersRecord, Short> getIdentity() {
        return Keys.IDENTITY_PLAYERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PlayersRecord> getPrimaryKey() {
        return Keys.PK_PLAYERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PlayersRecord>> getKeys() {
        return Arrays.<UniqueKey<PlayersRecord>>asList(Keys.PK_PLAYERS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Players as(String alias) {
        return new Players(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Players as(Name alias) {
        return new Players(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Players rename(String name) {
        return new Players(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Players rename(Name name) {
        return new Players(name, null);
    }
}
