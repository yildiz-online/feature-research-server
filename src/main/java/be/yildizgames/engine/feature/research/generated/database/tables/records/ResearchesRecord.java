/*
 * This file is generated by jOOQ.
*/
package be.yildizgames.engine.feature.research.generated.database.tables.records;


import be.yildizgames.engine.feature.research.generated.database.tables.Researches;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResearchesRecord extends UpdatableRecordImpl<ResearchesRecord> implements Record3<Short, Short, String> {

    private static final long serialVersionUID = 1399932811;

    /**
     * Setter for <code>PUBLIC.RESEARCHES.RES_ID</code>.
     */
    public void setResId(Short value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.RESEARCHES.RES_ID</code>.
     */
    public Short getResId() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>PUBLIC.RESEARCHES.PLY_ID</code>.
     */
    public void setPlyId(Short value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.RESEARCHES.PLY_ID</code>.
     */
    public Short getPlyId() {
        return (Short) get(1);
    }

    /**
     * Setter for <code>PUBLIC.RESEARCHES.NAME</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.RESEARCHES.NAME</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Short> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Short, Short, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Short, Short, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field1() {
        return Researches.RESEARCHES.RES_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field2() {
        return Researches.RESEARCHES.PLY_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Researches.RESEARCHES.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component1() {
        return getResId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component2() {
        return getPlyId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value1() {
        return getResId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value2() {
        return getPlyId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResearchesRecord value1(Short value) {
        setResId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResearchesRecord value2(Short value) {
        setPlyId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResearchesRecord value3(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResearchesRecord values(Short value1, Short value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ResearchesRecord
     */
    public ResearchesRecord() {
        super(Researches.RESEARCHES);
    }

    /**
     * Create a detached, initialised ResearchesRecord
     */
    public ResearchesRecord(Short resId, Short plyId, String name) {
        super(Researches.RESEARCHES);

        set(0, resId);
        set(1, plyId);
        set(2, name);
    }
}
